{
    "contents" : "?pima\nif(!require(\"e1071\")){\n  stop(\"The package e1071 needs to be installed.\")\n}\nif(!require(c(\"rgl\", \"misc3d\"))){\n  stop(\"The packages rgl and misc3d must be installed.\")\n}\ndata(pima)\nlibrary(caret)\ntrain<-createDataPartition(pima$class, p = .8, list = F)###Create a training set using 80% of dataset\npim.smv<-smvcir(\"class\", data = pima[train,], test = T) ###Build smvcir model on training set\npreds<-predict(pim.smv, newdata = pima[-train,], type = \"class\")\ntable(preds, pima$class[-train])  ###Check accuracy\n\n\n###Get Coordinates\npred_coords<-predict(pim.smv, newdata = pima, coordinates_only = TRUE)\npred_coords$class<-pima$class\n\nlibrary(e1071)\nsvm_mod<-svm(class~., data = pred_coords[train,], kernel = \"radial\")  ###Build an SVM model and check accuracy\nsvmp<-predict(svm_mod, newdata = pred_coords[-train,])\nconfusionMatrix(svmp, pred_coords$class[-train])\nx$type\n\nx<-obj\ndata = w_coords\nformula<-D1~D2\n\n{\nif (x$type < 3) {\n  if (is.null(formula) && ncol(data) == 3) {\n    formula <- formula(delete.response(terms(x)))\n    formula[2:3] <- formula[[2]][2:3]\n  }\n  if (is.null(formula))\n    stop(\"missing formula.\")\n  if (fill) {\n    sub <- model.frame(formula, data)\n    xr <- seq(min(sub[, 2]), max(sub[, 2]), length = grid)\n    yr <- seq(min(sub[, 1]), max(sub[, 1]), length = grid)\n    l <- length(slice)\n    if (l < ncol(data) - 3) {\n      slnames <- names(slice)\n      slice <- c(slice, rep(list(0), ncol(data) - 3 -\n                              l))\n      names <- labels(delete.response(terms(x)))\n      names(slice) <- c(slnames, names[!names %in%\n                                         c(colnames(sub), slnames)])\n    }\n    for (i in names(which(sapply(data, is.factor)))) if (!is.factor(slice[[i]])) {\n      levs <- levels(data[[i]])\n      lev <- if (is.character(slice[[i]]))\n        slice[[i]]\n      else levs[1]\n      fac <- factor(lev, levels = levs)\n      if (is.na(fac))\n        stop(paste(\"Level\", dQuote(lev), \"could not be found in factor\",\n                   sQuote(i)))\n      slice[[i]] <- fac\n    }\n    lis <- c(list(yr), list(xr), slice)\n    names(lis)[1:2] <- colnames(sub)\n    new <- expand.grid(lis)[, labels(terms(x))]\n    preds <- predict(x, new)\n    filled.contour(xr, yr, matrix(as.numeric(preds),\n                                  nrow = length(xr), byrow = TRUE), plot.axes = {\n                                    axis(1)\n                                    axis(2)\n                                    colind <- as.numeric(model.response(model.frame(x,\n                                                                                    data)))\n                                    dat1 <- data[-x$index, ]\n                                    dat2 <- data[x$index, ]\n                                    coltmp1 <- symbolPalette[colind[-x$index]]\n                                    coltmp2 <- symbolPalette[colind[x$index]]\n                                    points(formula, data = dat1, pch = dataSymbol,\n                                           col = coltmp1)\n                                    points(formula, data = dat2, pch = svSymbol,\n                                           col = coltmp2)\n                                  }, levels = 1:(length(levels(preds)) + 1), key.axes = axis(4,\n                                                                                             1:(length(levels(preds))) + 0.5, labels = levels(preds),\n                                                                                             las = 3), plot.title = title(main = \"SVM classification plot\",\n                                                                                                                          xlab = names(lis)[2], ylab = names(lis)[1]),\n                   ...)\n  }\n  else {\n    plot(formula, data = data, type = \"n\", ...)\n    colind <- as.numeric(model.response(model.frame(x,\n                                                    data)))\n    dat1 <- data[-x$index, ]\n    dat2 <- data[x$index, ]\n    coltmp1 <- symbolPalette[colind[-x$index]]\n    coltmp2 <- symbolPalette[colind[x$index]]\n    points(formula, data = dat1, pch = dataSymbol, col = coltmp1)\n    points(formula, data = dat2, pch = svSymbol, col = coltmp2)\n    invisible()\n  }\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1459381949911.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2279422289",
    "id" : "7DED465C",
    "lastKnownWriteTime" : 1459447368,
    "path" : "C:/Users/Dan/Desktop/scratch.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}