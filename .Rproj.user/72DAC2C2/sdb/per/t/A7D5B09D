{
    "contents" : "plotit<-function (x, dimensions = c(1, 2), groups = 1:10, GL = FALSE,\n          ID = FALSE, build_svm = FALSE, kernel = NULL, svmModel, method = \"SMVCIR\")\n{\n  if(class(x)==\"smvcir\"){\n    groupnum<-x$groups\n    groupcol<-ncol(x$direct)\n    compcases<-x$compcases\n    datmat<-x<-x$direct      ####add x double assignment\n\n  } else{\n    groupcol<-NA\n    for (i in 1:ncol(x)){\n      if (class(x[,i])==\"factor\"){\n        groupcol[i]<-i\n      } else{\n        groupcol[i]<-NA\n      }\n    }\n    groupcol<-groupcol[!is.na(groupcol)]\n    if(length(groupcol)>1)\n      stop(\"Only numerical predictors allowed for smvcir, appears you have more than one variable of class=='factor'\")\n        if(length(groupcol)==0)\n          stop(\"Missing a dependent group variable of class=='factor' in your coordinates\")\n\n    groupnum<-length(unique(x[,groupcol]))\n    datmat<-x\n    #datmat[,groupcol]<-as.numeric(datmat[,groupcol])\n    compcases <- data.frame(complete.cases(datmat)) ###look ahead check line 72\n    compcases <- cbind(compcases, t(t(1:nrow(datmat))))\n  }\n\n\n\n  if (length(groups) >= groupnum) {\n    bx <- matrix(\"Rendering all Groups\", 1, 1)\n    rownames(bx) <- \"\"\n    colnames(bx) <- \"\"\n    print(noquote(bx))\n    groups <- 1:(groupnum)\n  }\n  colors <- c(\"black\", \"red\", \"blue\", \"orange\", \"purple\", \"brown\",\n              \"green\", \"pink\", \"yellow\", \"aquamarine\")\n  gsymbols <- c(0, 15, 2, 17, 3, 4, 8, 1, 16, 6)\n  gsymbolsExpl <- c(\"Empty Square\", \"Fill Square\", \"Empty Triangle\",\n                    \"Fill Triangle\", \"Plus\", \"X\", \"Asterisk\", \"Empty Diamond\",\n                    \"Fill Diamond\", \"Upside Down Triangle\")\n  dispmat = c()\n  for (i in 1:length(groups)) {\n    if ((groups[i] > groupnum) || (groups[i] < 1)) {\n      print(noquote(\"User entered illegal group\"))\n      return(NaN)\n    }\n    else {\n      dispmat <- rbind(dispmat, c(levels(x[,groupcol])[i], colors[groups[i]],  #####change first item of c()\n                                  gsymbolsExpl[groups[i]]))\n    }\n  }\n  rownames(dispmat) <- rep(\"\", nrow(dispmat))\n  colnames(dispmat) <- c(\"Group\", \"Color\", \"Symbol\")\n  print(noquote(dispmat))\n  if (GL == TRUE) {\n    if (length(dimensions) < 3) {\n      dimensions = c(1, 2, 3)\n    }\n    else if (length(dimensions) != 3) {\n      print(noquote(\"Warning: More than 3 dimensions specified\"))\n      dimensions = c(dimensions[1], dimensions[2], dimensions[3])\n    }\n  }\n  for (i in 1:length(dimensions)) {\n    if ((dimensions[i] < 1)) {\n      print(noquote(\"User entered illegal dimension\"))\n      print(i)\n      return(NaN)\n    }\n  }\n  if (length(dimensions) == 1) {\n    plotit1D(wmat = datmat, dimension = dimensions, groups = groups)\n  }\n  else {\n    if (GL == TRUE) {\n      plotit3D(wmat = datmat, coords = dimensions, groups = groups,\n               ID = ID, compcases = compcases, build_svm = build_svm, groupcol = groupcol, kernel=kernel, svmModel = svmModel)\n    }\n    else {\n      plotit2D(wmat = datmat, dimensions = dimensions,\n               groups = groups, method = method, build_svm = build_svm, kernel = kernel, svmModel = svmModel)\n    }\n  }\n}\n",
    "created" : 1463856719138.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1497743566",
    "id" : "A7D5B09D",
    "lastKnownWriteTime" : 1463173911,
    "path" : "C:/Users/Dan/Desktop/smvcir/smvcir_funcs/SMVCIR/R/plotit.R",
    "project_path" : "R/plotit.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}