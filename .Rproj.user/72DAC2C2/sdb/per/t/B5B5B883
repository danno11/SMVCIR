{
    "contents" : "plotit2D<-function (wmat, dimensions, groups, method, build_svm, kernel, svmModel)\n{\n  if(build_svm==TRUE){\n    if(!require(\"e1071\")){\n      stop(\"The package e1071 must be installed.\")\n    }\n    if(!require(\"gplots\")){\n      stop(\"The package gplots must be installed.\")\n    }\n    if(is.null(kernel)){\n      kernel<-\"radial\"\n    }\n    if(!is.null(svmModel)){\n      mod_obj<-svmModel\n    } else{\n     k = length(wmat[1, ]) - 1\n     #mod_obj<-svm(as.formula(paste(names(wmat)[k+1],\"~ .\")), kernel = kernel, data = wmat)\n     mod_obj<-svm(as.formula(c(paste(names(wmat)[k+1],\"~\"), paste(names(wmat)[dimensions],\n                                   collapse = \"+\"))), kernel = kernel,\n                  data = wmat)\n    }\n     #slice<-lapply(wmat[,1:k], median)\n     slice<-lapply(wmat[,dimensions], median)\n\n\n  }\n  def.par <- par(no.readonly = TRUE)\n  par(mai = c(0, 0, 0, 0))\n  totcol <- length(dimensions)\n  mat <- matrix(nrow = totcol, ncol = totcol)\n  ordering <- 1\n  for (i in 1:totcol) {\n    for (j in 1:totcol) {\n      mat[i, j] <- ordering\n      ordering <- ordering + 1\n    }\n  }\n  layout(mat, widths = rep(0.5, ncol(mat)), heights = rep(0.5,\n                                                          ncol(mat)), respect = TRUE)\n  colors <- c(\"black\", \"red\", \"blue\", \"orange\", \"purple\", \"brown\",\n              \"green\", \"pink\", \"yellow\", \"aquamarine\")\n  gsymbols <- c(0, 15, 2, 17, 3, 4, 8, 1, 16, 6)\n  for (i in 1:totcol) {\n    for (j in 1:totcol) {\n      if (i == j) {\n        if (i != totcol) {\n          plot(wmat[, dimensions[j]], wmat[, dimensions[j]],\n               type = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\")\n          legend(\"center\", legend = c(dimensions[j]),\n                 bty = \"n\", title = method)\n          axis(side = 4)\n        }\n        else {\n          plot(wmat[, dimensions[j]], wmat[, dimensions[j]],\n               type = \"n\", yaxt = \"n\", xaxt = \"n\", xlab = \"\",\n               ylab = \"\")\n          legend(\"center\", legend = c(j), bty = \"n\",\n                 title = method)\n          axis(side = 3)\n        }\n      }\n      else if (i > j) {\n          x <- c(0, 1)\n          plot(x, type = \"n\", axes = FALSE, xlab = \"\",\n               ylab = \"\")\n          legend(\"center\", legend = c(\" \"), bty = \"n\",\n                 title = \"\")\n\n      }\n      else {\n        coords = dimensions\n        k = length(wmat[1, ]) - 1\n        n = length(wmat[, 1])\n        zmat = wmat[, 1:k]\n        indi = wmat[, (k + 1)]\n        numg = max(as.numeric(indi)) ###add as.numeric()\n        ssgroup = rep(0, numg)\n        for (p in 1:numg) {\n          see = wmat[indi == levels(indi)[p], ]\n          ssgroup[p] = length(see[, 1])\n        }\n        xl = c(min(zmat), max(zmat))\n        yl = c(min(zmat), max(zmat))\n        newindi <- order(indi)\n        z1 <- zmat[, coords[i]]\n        z2 <- zmat[, coords[j]]\n        zz1 <- z1[newindi]\n        zz2 <- z2[newindi]\n        plot(zz2, zz1, xlab = \"\", ylab = \"\", pch = \" \",\n             xlim = xl, ylim = yl, axes = FALSE)\n        if(build_svm==TRUE){\n          xr <- seq(xl[1], xl[2], length = 50)\n          yr <- seq(yl[1], yl[2], length = 50)\n          formala<-as.formula(paste(names(zmat)[i], \"~\", names(zmat)[j]))\n          lis <- c(list(yr), list(xr), slice)\n          names(lis)[1:2] <- colnames(wmat)[c(i,j)]\n          new <- expand.grid(lis)[, labels(terms(mod_obj))]\n          preds <- predict(mod_obj, new)\n          .filled.contour(xr,\n                          yr,\n                          matrix(as.numeric(preds),nrow = length(xr), byrow = TRUE),\n                          levels = 1:length(levels(preds))+1,\n                          col=colorpanel(3, low = \"gray70\", high = \"gray45\"))\n        }\n\n\n\n        ic <- 0\n        coli <- 0\n        for (p in 1:numg) {\n          there <- 0\n          for (m in 1:length(groups)) {\n            if (groups[m] == p) {\n              there <- 1\n              break\n            }\n          }\n          start <- ic + 1\n          stop <- ic + ssgroup[p]\n          coli <- coli + 1\n          if (there == 1) {\n            points(zz2[start:stop], zz1[start:stop],\n                   col = colors[p], pch = gsymbols[p])\n            abline(lsfit(zz2[start:stop], zz1[start:stop]),\n                   col = colors[p])\n            there <- 0\n          }\n          ic <- ic + ssgroup[p]\n        }\n      }\n    }\n  }\n  par(def.par)\n}\n",
    "created" : 1463151333630.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3337744447",
    "id" : "B5B5B883",
    "lastKnownWriteTime" : 1463173830,
    "path" : "C:/Users/Dan/Desktop/smvcir/smvcir_funcs/SMVCIR/R/plotit2d.R",
    "project_path" : "R/plotit2d.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}