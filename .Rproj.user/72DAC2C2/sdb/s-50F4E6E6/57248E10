{
    "contents" : "x<-fullset\ndimensions = 1:3\nGL = TRUE\n\nindi = wmat[, as.numeric(as.character(k + 1))]     ####add as.numeric model matrix??\n\nx<-pred_coords\ndimensions = 1:3\nGL = TRUE\n\n\n\n\n\n\n\n\nfunction (data, positive = NULL, prevalence = NULL, ...) \n{\n  requireNamespaceQuietStop(\"e1071\")\n  if (length(dim(data)) != 2) \n    stop(\"the table must have two dimensions\")\n  if (!all.equal(nrow(data), ncol(data))) \n    stop(\"the table must nrow = ncol\")\n  if (!all.equal(rownames(data), colnames(data))) \n    stop(\"the table must the same classes in the same order\")\n  if (!is.character(positive) & !is.null(positive)) \n    stop(\"positive argument must be character\")\n  classLevels <- rownames(data)\n  numLevels <- length(classLevels)\n  if (numLevels < 2) \n    stop(\"there must be at least 2 factors levels in the data\")\n  if (numLevels == 2 & is.null(positive)) \n    positive <- rownames(data)[1]\n  if (numLevels == 2 & !is.null(prevalence) && length(prevalence) != \n      1) \n    stop(\"with two levels, one prevalence probability must be specified\")\n  if (numLevels > 2 & !is.null(prevalence) && length(prevalence) != \n      numLevels) \n    stop(\"the number of prevalence probability must be the same as the number of levels\")\n  if (numLevels > 2 & !is.null(prevalence) && is.null(names(prevalence))) \n    stop(\"with >2 classes, the prevalence vector must have names\")\n  propCI <- function(x) {\n    binom.test(sum(diag(x)), sum(x))$conf.int\n  }\n  propTest <- function(x) {\n    out <- binom.test(sum(diag(x)), sum(x), p = max(apply(x, \n                                                          2, sum)/sum(x)), alternative = \"greater\")\n    unlist(out[c(\"null.value\", \"p.value\")])\n  }\n  overall <- c(unlist(e1071::classAgreement(data))[c(\"diag\", \n                                                     \"kappa\")], propCI(data), propTest(data), mcnemar.test(data)$p.value)\n  names(overall) <- c(\"Accuracy\", \"Kappa\", \"AccuracyLower\", \n                      \"AccuracyUpper\", \"AccuracyNull\", \"AccuracyPValue\", \"McnemarPValue\")\n  if (numLevels == 2) {\n    if (is.null(prevalence)) \n      prevalence <- sum(data[, positive])/sum(data)\n    negative <- classLevels[!(classLevels %in% positive)]\n    tableStats <- c(sensitivity.table(data, positive), specificity.table(data, \n                                                                         negative), posPredValue.table(data, positive, prevalence = prevalence), \n                    negPredValue.table(data, negative, prevalence = prevalence), \n                    prevalence, sum(data[positive, positive])/sum(data), \n                    sum(data[positive, ])/sum(data))\n    names(tableStats) <- c(\"Sensitivity\", \"Specificity\", \n                           \"Pos Pred Value\", \"Neg Pred Value\", \"Prevalence\", \n                           \"Detection Rate\", \"Detection Prevalence\")\n    tableStats[\"Balanced Accuracy\"] <- (tableStats[\"Sensitivity\"] + \n                                          tableStats[\"Specificity\"])/2\n  }\n  else {\n    tableStats <- matrix(NA, nrow = length(classLevels), \n                         ncol = 8)\n    for (i in seq(along = classLevels)) {\n      pos <- classLevels[i]\n      neg <- classLevels[!(classLevels %in% classLevels[i])]\n      prev <- if (is.null(prevalence)) \n        sum(data[, pos])/sum(data)\n      else prevalence[pos]\n      tableStats[i, ] <- c(sensitivity.table(data, pos), \n                           specificity.table(data, neg), posPredValue.table(data, \n                                                                            pos, prevalence = prev), negPredValue.table(data, \n                                                                                                                        neg, prevalence = prev), prev, sum(data[pos, \n                                                                                                                                                                pos])/sum(data), sum(data[pos, ])/sum(data), \n                           NA)\n      tableStats[i, 8] <- (tableStats[i, 1] + tableStats[i, \n                                                         2])/2\n    }\n    rownames(tableStats) <- paste(\"Class:\", classLevels)\n    colnames(tableStats) <- c(\"Sensitivity\", \"Specificity\", \n                              \"Pos Pred Value\", \"Neg Pred Value\", \"Prevalence\", \n                              \"Detection Rate\", \"Detection Prevalence\", \"Balanced Accuracy\")\n  }\n  structure(list(positive = positive, table = data, overall = overall, \n                 byClass = tableStats, dots = list(...)), class = \"confusionMatrix\")\n}\n<environment: namespace:caret>",
    "created" : 1458956652769.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "2258154188",
    "id" : "57248E10",
    "lastKnownWriteTime" : 7011605692497750387,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}