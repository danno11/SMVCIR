{
    "contents" : "library(SMVCIR)\nlibrary(caret)\ntrain<-createDataPartition(wisc$tumor, p = .8, list = FALSE)\nmodel<-smvcir(group = \"tumor\", data = wisc[train,], test = TRUE)\n\nmodel$statdim\n\nplotcoords(model, dimensions = 1:3, build_svm = TRUE)\nplotcoords(model, dimensions = 1:3, build_svm = TRUE, GL = TRUE)\nlibrary(SMVCIR)\nlibrary(caret)\ntrain<-createDataPartition(pima$diabetes, p = .8, list = FALSE)\npim.smv<-smvcir(\"diabetes\", data = pima[train,], test = F) ###Build smvcir model on training set\npred_coords<-predict(pim.smv, newdata = pima[-train,], coordinates_only = TRUE)\npred_coords<-predict(pim.smv, newdata = pima[-train,], coordinates_only = TRUE, maxdim = 3)\n\npred_coords$diabetes<-pima$diabetes[-train]\n\nplotcoords(pred_coords, dimensions = 1:8)\nplotcoords(pred_coords, dimensions = 1:3, GL = TRUE, build_svm = TRUE)\nplotcoords(pred_coords, dimensions = 1:3, build_svm = TRUE)\n\ndata(banknote)\n###Create training rows for Banknote data\ntrain<-sample(1:nrow(banknote), nrow(banknote)*.8, replace = FALSE)\n####Build smvcir model on training set\nbanksmv<-smvcir(\"Y\", data = banknote, test = TRUE)\nsummary(banksmv)\nplotcoords(banksmv, dimensions = 1:3, GL = TRUE, build_svm = TRUE)\nplotcoords(banksmv, dimensions = 1:3, GL = TRUE, build_svm = TRUE, kernel = \"linear\")\nplotcoords()\n####adding new points\nplot(banksmv$direct[,2], banksmv$direct[,1], pch = 19, col = banksmv$direct[,7])\npoints(banksmv$muhat_z[,2], banksmv$muhat_z[,1], cex = 2, pch = 19, col = \"green\")\npoints(, 0, col = \"blue\")\n\n####Build svm model on b three dimensions of smvcir discriminant coordinates\nsvmModel<-svm(Y~., data = banksmv$direct[,c(1:3,7) ])\npreds<-predict(svmModel, )\ntable(preds, banksmv$direct[,7])\n\n###Get discriminant coordinates from test set\nbcoords<-predict(banksmv, newdata = banknote[-train,], coordinates_only = TRUE, maxdim = 3)\nbcoords$Y<-banknote[-train,]$Y\n\n####Plot test set coordinates with respect to svm model built from training set\nplotcoords(bcoords, dimensions = 1:3, GL = TRUE, build_svm = TRUE, svmModel = svmModel)\nplotcoords(bcoords, dimensions = 1:3, GL = TRUE, build_svm = TRUE)\n\n\n\n####248 adn 254 adn 281 373 378\n\nx <- rep(0:1, c(10, 20))\nmyx<-x\nclass(myx)<-\"myvector\"\nprint.myvector <- function(x, ...){\n  cat(\"This is my vector:\\n\")\n  cat(paste(x[1:5]), \"...\\n\")\n}\nmyx\n\n###29 & 35\n\n\n\nxr <- seq(min(zmat[,i]), max(zmat[, i]), length = 50)\nyr <- seq(min(zmat[,j]), max(zmat[, j]), length = 50)\n\nif(build_svm==TRUE){\n  coords = dimensions\n  k = length(wmat[1, ]) - 1\n  n = length(wmat[, 1])\n  zmat = wmat[, 1:k]\n  xr <- seq(min(zmat[,i]), max(zmat[, i]), length = 50)\n  yr <- seq(min(zmat[,j]), max(zmat[, j]), length = 50)\n  slice<-lapply(zmat, median)\n  mod_obj<-svm(as.formula(paste(names(wmat)[k+1],\"~ .\")), data = wmat, kernel = \"linear\")\n  formala<-as.formula(paste(names(zmat)[i], \"~\", names(zmat)[j]))\n  #par(new = TRUE)\n  lis <- c(list(yr), list(xr), slice)\n  names(lis)[1:2] <- colnames(wmat)[c(i,j)]\n  new <- expand.grid(lis)[, labels(terms(mod_obj))]\n  preds <- predict(mod_obj, new)\n  filled.contour(xr, yr, matrix(as.numeric(preds),\n                                nrow = length(xr), byrow = TRUE), plot.axes = {\n                                  #axis(1)\n                                  #axis(2)\n                                  colind <- as.numeric(model.response(model.frame(mod_obj, wmat)))\n                                  dat1 <- wmat[-mod_obj$index, ]\n                                  dat2 <- wmat[mod_obj$index, ]\n                                  coltmp1 <- palette()[colind[-mod_obj$index]]\n                                  coltmp2 <- palette()[colind[mod_obj$index]]\n                                  #points(formala, data = dat1, pch = 21,\n                                  #       col = \"black\")\n                                  #points(formala, data = dat2, pch = 19,\n                                  #       col = \"red\")\n                                }, levels = 1:(length(levels(preds)) + 1))\n  \n\n                levels = 1:(length(levels(preds)) + 1),\n                color.palette = cm.colors,\n                col = color.palette(length(levels) - 1))\n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nglass<-read.csv(url(\"http://archive.ics.uci.edu/ml/machine-learning-databases/glass/glass.data\"))\nnames(glass)<-c(\"ID\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type\")\nglass<-glass[,-1]\nglass$Type<-factor(glass$Type)\ntable(glass$Type)\n\nsave(glass, file=\"data/glass.RData\")\nlibrary(SMVCIR)\nglass.smv<-smvcir(data = glass, group = \"Type\", test=TRUE)\n\nglasspred<-predict(glass.smv, glass, coordinates_only = TRUE)\nglasspred$Type<-glass$Type\npred<-predict(glass.smv, glass, type = \"class\")\nconfusionMatrix(pred, glass$Type)\n\nlibrary(randomForest)\nrfMod<-randomForest(Type~., data = glass)\n\nplotcoords(x=glasspred, dimensions = 1:3,  GL = TRUE)\nplotcoords(glass.smv, dimensions = 4:8)\n\nglasscoords<-predict(glass.smv, glass, coordinates_only = TRUE)\nglasscoords$Type<-glass$Type\nplotcoords(glasscoords, dimensions = 1:3, GL = TRUE)\n\n\ncsonlynum$Dep.Var.2<-ccu$Dep.Var.2\nccu.smv<-smvcir(group = \"Dep.Var.2\", data = csonlynum[train,], test = FALSE)\nccuprob<-predict(ccu.smv, csonlynum[-train,], type = \"prob\")\n\n\n\nccupreds<-predict(ccu.smv, csonlynum[-train,], coordinates_only = TRUE)\nccupreds$Dep.Var.2<-ccu$Dep.Var.2[-train]\nplotcoords(ccupreds, dimensions = c(1:3), build_svm = TRUE, GL = TRUE)\nccuclass<-predict(ccu.smv, csonlynum[-train,], type = \"class\")\nconfusionMatrix(ccuclass, csonlynum$Dep.Var.2[-train])\n\nplotcoords(ccupreds, dimensions = 1:3, GL = TRUE, build_svm = TRUE)\n\n\n\nccugf<-grapherfunc(ccu.smv, csonlynum[-train,])\n\n\n\n\nwines<-read.csv(url(\"https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data\"), header = FALSE)\nhead(wines)\nnames(wines)<-c(alcohol, malic, )\n\n\nnpsm:::\n\ndata(\"latour\")\nstr(latour)\n\nplot(latour$year, latour$quality, type = \"l\")\n\n?fkk.test\nfkk.test(y = latour$end.of.harvest, ind = factor(latour$quality))\n\nlatour$rain<-factor(latour$rain)\nstr(latour)\n\nmod<-smvcir(\"rain\", data = latour[,c(2:4)])\n\nlibrary(npsm)\ndat <- matrix(scan(\"C:/users/dan/desktop/smvcir/threesamp.dat\",skip=4),byrow=T,ncol=2)\nRead 66 items\nresponse<-dat[,1];   indicator <- dat[,2]\nfkk.test(response,indicator)\ndatMod<-smvcir(\"indicator\", data = dat)\n\n\n\n\n",
    "created" : 1459054266466.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "2222461157",
    "id" : "8278AA40",
    "lastKnownWriteTime" : 7011605692497750387,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled3"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}