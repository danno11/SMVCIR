{
    "contents" : "plotit3D<-function (wmat, coords, groups, ID, compcases, build_svm, groupcol, kernel, svmModel)\n{\n  if(!require(\"rgl\")){\n    stop(\"The package rgl must be installed.\")\n  }\n\n  k = length(wmat[1, ]) - 1\n  n = length(wmat[, 1])\n  zmat = wmat[, 1:k]\n  indi = wmat[, as.numeric(k + 1)]     ####add as.numeric model matrix??\n  a = 1 * (compcases[, 1])\n  oorder <- compcases[a == 1, 2]\n  numg = length(unique(as.numeric(indi)))\n  ssgroup = rep(0, numg)\n  for (i in 1:numg) {\n    see = wmat[indi==levels(indi)[i], ]###levels around ind\n    ssgroup[i] = length(see[, 1])\n  }\n  xl = c(min(zmat), max(zmat))\n  yl = c(min(zmat), max(zmat))\n  newindi <- order(indi)\n  z1 <- zmat[, coords[1]]\n  z2 <- zmat[, coords[2]]\n  z3 <- zmat[, coords[3]]\n  zz1 <- z1[newindi]\n  zz2 <- z2[newindi]\n  zz3 <- z3[newindi]\n  zoorder <- oorder[newindi]\n  xl = c(min(zz1), max(zz1)) ###changes zz2->zz1 here\n  yl = c(min(zz2), max(zz2))\n  zl = c(min(zz3), max(zz3))\n  colors <- c(\"black\", \"red\", \"blue\", \"orange\", \"purple\", \"brown\",\n              \"green\", \"pink\", \"yellow\", \"aquamarine\")\n  open3d()\n  plot3d(x = zz1, y = zz2, z = zz3, xlab = \"\", ylab = \"\", zlab = \"\",   ###and here\n         type = \"n\")\n  decorate3d(xl, yl, zl, xlab = paste(\"D\", coords[1], sep = \"\"),\n             ylab = paste(\"D\", coords[2], sep = \"\"), zlab = paste(\"D\",\n                                                                  coords[3], sep = \"\"))\n  ic <- 0\n  coli <- 0\n  for (i in 1:numg) {\n    there <- 0\n    for (j in 1:length(groups)) {\n      if (groups[j] == i) {\n        there <- 1\n        break\n      }\n    }\n    start <- ic + 1\n    stop <- ic + ssgroup[i]\n    if (there == 1) {\n      points3d(zz1[start:stop], zz2[start:stop], zz3[start:stop],\n               color = colors[i], size = 7)\n      there <- 0\n    }\n    ic <- ic + ssgroup[i]\n  }\n  x <- zz1\n  y <- zz2\n  z <- zz3\n  kept <- rep(0, n)###change length(x) to length(n)\n  dispdat <- data.frame(zoorder, x, y, z, kept)\n  names(dispdat) <- c(\"Obs #\", paste(\"D\", coords[1], sep = \"\"),\n                      paste(\"D\", coords[2], sep = \"\"), paste(\"D\", coords[3],\n                                                             sep = \"\"), \"keep\")\n  while (ID) {\n    f <- select3d(button = c(\"right\"))\n    dispdat[, 5] <- f(dispdat[, 2], dispdat[, 3], dispdat[,\n                                                          4])\n    rgl.clear()\n    decorate3d(xl, yl, zl, xlab = paste(\"D\", coords[1], sep = \"\"),\n               ylab = paste(\"D\", coords[2], sep = \"\"), zlab = paste(\"D\",\n                                                                    coords[3], sep = \"\"))\n    ic <- 0\n    coli <- 0\n    for (i in 1:numg) {\n      there <- 0\n      for (j in 1:length(groups)) {\n        if (groups[j] == i) {\n          there <- 1\n          break\n        }\n      }\n      start <- ic + 1\n      stop <- ic + ssgroup[i]\n      if (there == 1) {\n        dispdatred <- dispdat[start:stop, ]\n        dispdatredKeep <- subset(dispdatred, keep ==\n                                   1)\n        if (nrow(dispdatredKeep) > 0) {\n          pdKeep <- as.matrix(dispdatredKeep[, c(1, 2,\n                                                 3, 4)])\n          rownames(pdKeep) <- rep(\"\", nrow(pdKeep))\n          print(pdKeep)\n        }\n        dispdatredNKeep <- subset(dispdatred, keep ==\n                                    0)\n        points3d(dispdatredNKeep[, 2], dispdatredNKeep[,\n                                                       3], dispdatredNKeep[, 4], color = colors[i],\n                 size = 7)\n        points3d(dispdatredKeep[, 2], dispdatredKeep[,\n                                                     3], dispdatredKeep[, 4], color = \"gray\", size = 7)\n        there <- 0\n      }\n      ic <- ic + ssgroup[i]\n    }\n  }\n\n  if(build_svm==TRUE){\n    if(!require(\"e1071\")){\n      stop(\"The package e1071 needs to be installed.\")\n    }\n    if(!require(\"misc3d\")){\n      stop(\"The package misc3d must be installed.\")\n    }\n    if(numg > 2){\n      stop(\"svm can only be built here for binary classification.\")\n    }\n    if(is.null(kernel)){\n      kernel<-\"radial\"\n    }\n\n    svmx<-wmat[,coords]\n    svmy<-wmat[,groupcol]\n\n    if(!is.null(svmModel)){\n      svm_mod<-svmModel\n    } else{\n      svm_mod<-svm(x = svmx, y = svmy, kernel=kernel, type = \"C-classification\", scale = FALSE)\n    }\n    nnew = 50\n    newdat.list = lapply(svmx, function(svmx) seq(min(svmx), max(svmx), len=nnew))\n    newdat      = expand.grid(newdat.list)\n    newdat.pred = predict(svm_mod, newdata=newdat, decision.values=T)\n    newdat.dv   = attr(newdat.pred, 'decision.values')\n    newdat.dv   = array(newdat.dv, dim=rep(nnew, 3))\n    # Fit/plot an isosurface to the decision boundary\n    contour3d(newdat.dv, level=0, x=newdat.list[[coords[1]]], y=newdat.list[[coords[2]]], z=newdat.list[[coords[3]]], add=T)\n  }\n}\n",
    "created" : 1468877414032.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1774229173",
    "id" : "16BD243C",
    "lastKnownWriteTime" : 1468878865,
    "path" : "C:/Users/Dan/Desktop/smvcir/smvcir_funcs/SMVCIR/R/plotit3D.R",
    "project_path" : "R/plotit3D.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}